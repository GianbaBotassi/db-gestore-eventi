Selezionare tutti gli eventi gratis, cioè con prezzo nullo (19)
select * from events e 
where price is null;

Selezionare tutte le location in ordine alfabetico (82)
select * from locations l 
order by name;

Selezionare tutti gli eventi che costano meno di 20 euro e durano meno di 3 ore (38)
select * from events e
where price < 20 && duration < "03:00:00";

Selezionare tutti gli eventi di dicembre 2023 (25)
select * from events e
where month (`start`) = 12 && year(`start`) = 2023;

Selezionare tutti gli eventi con una durata maggiore alle 2 ore (823)
select * from events e
where duration > "02:00:00"

Selezionare tutti gli eventi, mostrando nome, data di inizio, ora di inizio, ora di fine e
durata totale (1040)
select name,date(start) as data,time(start) as inizio,TIMESTAMPADD(SECOND, TIME_TO_SEC(duration), start),duration from events;

Selezionare tutti gli eventi aggiunti da “Fabiano Lombardo” (id: 1202) (132)
select * from events e
join users u on e.user_id = u.id 
where first_name like "Fabiano" && last_name like "Lombardo";

Selezionare il numero totale di eventi per ogni fascia di prezzo (81)
select price, count(*)  from events e
group by price ;

Selezionare tutti gli utenti admin ed editor (9)
select * from users u 
join roles r on r.id = u.role_id 
where r.name  in("admin","editor");

Selezionare tutti i concerti (eventi con il tag “concerti”) (72)
select * from events e 
join event_tag et on et.event_id = e.id 
join tags t ON t.id = et.tag_id 
where t.name like "concerti";

Selezionare tutti i tag e il prezzo medio degli eventi a loro collegati (11)
select t.name,AVG(e.price) from tags t 
join event_tag et on et.tag_id = t.id 
join events e ON et.event_id = e.id 
group by t.name ;

Selezionare tutte le location e mostrare quanti eventi si sono tenute in ognuna di
esse (82)
select l.name,count(*) from locations l 
join events e on e.location_id = l.id 
group by l.name;

Selezionare tutti i partecipanti per l’evento “Concerto Classico Serale” (slug:
concerto-classico-serale, id: 34) (30)
select * from users u
join bookings b on u.id = b.user_id 
join events e ON b.event_id = e.id 
where e.slug like "concerto-classico-serale";

Selezionare tutti i partecipanti all’evento “Festival Jazz Estivo” (slug:
festival-jazz-estivo, id: 2) specificando nome e cognome (13)
select u.first_name,u.last_name  from users u
join bookings b on u.id = b.user_id 
join events e ON b.event_id = e.id 
where e.id = 2;

Selezionare tutti gli eventi sold out (dove il totale delle prenotazioni è uguale ai
biglietti totali per l’evento) (18)
select e.name,count(b.id) as conteggio,e.total_tickets as ticketTotali from users u
join bookings b on u.id = b.user_id 
join events e on e.id = b.event_id 
group by e.name,e.total_tickets 
having conteggio = e.total_tickets;

Selezionare tutte le location in ordine per chi ha ospitato più eventi (82)
select l.name,count(e.id) as totaleEventi  from events e
join locations l on e.location_id = l.id 
group by l.name 
order by totaleEventi desc;

Selezionare tutti gli utenti che si sono prenotati a più di 70 eventi (74)
select u.id  ,count(b.id) as eventiPrenotati 
from users u 
join bookings b on u.id = b.user_id 
group by u.id  
having eventiPrenotati > 70;

Selezionare tutti gli eventi, mostrando il nome dell’evento, il nome della location, il
numero di prenotazioni e il totale di biglietti ancora disponibili per l’evento (1040)
select e.name as nomeEvento,l.name as nomeLocation,count(b.id) as prenotati,e.total_tickets as totali,(e.total_tickets  - count(b.id)) as disponibili from users u
join bookings b ON b.user_id = u.id 
join events e on e.id = b.event_id 
join locations l on l.id = e.location_id 
group by e.name,e.total_tickets,l.name ;